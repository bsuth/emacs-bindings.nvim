-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local CORE_WORD_CHARS = { _ = true }

for byte = string.byte('0'), string.byte('9') {
  CORE_WORD_CHARS[string.char(byte)] = true
}

for byte = string.byte('a'), string.byte('z') {
  CORE_WORD_CHARS[string.char(byte)] = true
}

for byte = string.byte('A'), string.byte('Z') {
  CORE_WORD_CHARS[string.char(byte)] = true
}

function getWordChars() {
  local wordChars = {}

  for coreWordChar in pairs(CORE_WORD_CHARS) {
    wordChars[coreWordChar] = true
  }

  for i = 1, #vim.g.emacs_bindings_wordchars {
    wordChars[vim.g.emacs_bindings_wordchars:sub(i, i)] = true
  }

  return wordChars
}

-- -----------------------------------------------------------------------------
-- Module
-- -----------------------------------------------------------------------------

module function wordBack() {
  local wordChars = getWordChars()
  local [_, lnum, col] = vim.fn.getpos('.')
  local line = vim.fn.getline('.')

  local newCol = col
  local nextChar = line:sub(newCol - 1, newCol - 1)

  while newCol > 1 && !wordChars[nextChar] {
    newCol -= 1
    nextChar = line:sub(newCol - 1, newCol - 1)
  }

  while newCol > 1 && wordChars[nextChar] {
    newCol -= 1
    nextChar = line:sub(newCol - 1, newCol - 1)
  }

  vim.fn.setpos('.', { 0, lnum, newCol, 0 })
}

module function wordForward() {
  local wordChars = getWordChars()
  local [_, lnum, col] = vim.fn.getpos('.')
  local line = vim.fn.getline('.')

  local newCol = col
  local nextChar = line:sub(newCol + 1, newCol + 1)

  while newCol < #line && wordChars[nextChar] {
    newCol += 1
    nextChar = line:sub(newCol + 1, newCol + 1)
  }

  while newCol < #line && !wordChars[nextChar] {
    newCol += 1
    nextChar = line:sub(newCol + 1, newCol + 1)
  }

  vim.fn.setpos('.', { 0, lnum, newCol + 1, 0 })
}

module function charDeleteBack() {
  local [_, _, col] = vim.fn.getpos('.')
  if col > 1 {
    nvim_feedkeys(nvim_replace_termcodes('<BS>', true, false, true), 'n', false)
  }
}

module function charDeleteForward() {
  local [_, _, col] = vim.fn.getpos('.')
  if col <= #vim.fn.getline('.') {
    nvim_feedkeys(nvim_replace_termcodes('<Delete>', true, false, true), 'n', false)
  }
}
