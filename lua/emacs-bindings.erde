-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local CORE_WORD_CHARS = { _ = true }

for byte = string.byte('0'), string.byte('9') {
  CORE_WORD_CHARS[string.char(byte)] = true
}

for byte = string.byte('a'), string.byte('z') {
  CORE_WORD_CHARS[string.char(byte)] = true
}

for byte = string.byte('A'), string.byte('Z') {
  CORE_WORD_CHARS[string.char(byte)] = true
}

function getWordChars() {
  local wordChars = {}

  for coreWordChar in pairs(CORE_WORD_CHARS) {
    wordChars[coreWordChar] = true
  }

  for i = 1, #vim.g.emacs_bindings_wordchars {
    wordChars[vim.g.emacs_bindings_wordchars:sub(i, i)] = true
  }

  return wordChars
}

function feedTermCodes(termCodes) {
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(termCodes, true, false, true), 'n', false)
}

function getWordBackCol(line, col) {
  local wordChars = getWordChars()
  local nextChar = line:sub(col - 1, col - 1)

  while col > 1 && !wordChars[nextChar] {
    col -= 1
    nextChar = line:sub(col - 1, col - 1)
  }

  while col > 1 && wordChars[nextChar] {
    col -= 1
    nextChar = line:sub(col - 1, col - 1)
  }

  return col
}

function getMoveWordForwardCol(line, col) {
  local wordChars = getWordChars()
  local nextChar = line:sub(col + 1, col + 1)

  while col < #line && wordChars[nextChar] {
    col += 1
    nextChar = line:sub(col + 1, col + 1)
  }

  while col < #line && !wordChars[nextChar] {
    col += 1
    nextChar = line:sub(col + 1, col + 1)
  }

  return col + 1
}

function getDeleteWordForwardCol(line, col) {
  local wordChars = getWordChars()
  local nextChar = line:sub(col + 1, col + 1)

  while col < #line && !wordChars[nextChar] {
    col += 1
    nextChar = line:sub(col + 1, col + 1)
  }

  while col < #line && wordChars[nextChar] {
    col += 1
    nextChar = line:sub(col + 1, col + 1)
  }

  return col + 1
}

-- -----------------------------------------------------------------------------
-- Module
-- -----------------------------------------------------------------------------

module function moveWordBack() {
  if vim.fn.mode() == 'c' {
    local col = vim.fn.getcmdpos()
    local line = vim.fn.getcmdline()
    feedTermCodes(('<Left>'):rep(col - getWordBackCol(line, col)))
  } else {
    local [_, lnum, col] = vim.fn.getpos('.')
    local line = vim.fn.getline('.')
    vim.fn.setcharpos('.', { 0, lnum, getWordBackCol(line, col), 0 })
  }
}

module function moveWordForward() {
  if vim.fn.mode() == 'c' {
    local col = vim.fn.getcmdpos()
    local line = vim.fn.getcmdline()
    feedTermCodes(('<Right>'):rep(getMoveWordForwardCol(line, col) - col))
  } else {
    local [_, lnum, col] = vim.fn.getpos('.')
    local line = vim.fn.getline('.')
    vim.fn.setcharpos('.', { 0, lnum, getMoveWordForwardCol(line, col), 0 })
  }
}

module function deleteCharBack() {
  local [_, _, col] = vim.fn.getpos('.')
  if vim.fn.mode() == 'c' || col > 1 {
    feedTermCodes('<BS>')
  }
}

module function deleteCharForward() {
  local [_, _, col] = vim.fn.getpos('.')
  local line = vim.fn.getline('.')
  if vim.fn.mode() == 'c' || col <= #line {
    feedTermCodes('<Delete>')
  }
}

module function deleteWordBack() {
  if vim.fn.mode() == 'c' {
    local col = vim.fn.getcmdpos()
    local line = vim.fn.getcmdline()
    feedTermCodes(('<BS>'):rep(col - getWordBackCol(line, col)))
  } else {
    local [_, lnum, col] = vim.fn.getpos('.')
    local line = vim.fn.getline('.')
    local newCol = getWordBackCol(line, col)
    vim.fn.setline(lnum, line:sub(1, newCol - 1) .. line:sub(col))
    vim.fn.setcharpos('.', { 0, lnum, newCol, 0 })
  }
}

module function deleteWordForward() {
  if vim.fn.mode() == 'c' {
    local col = vim.fn.getcmdpos()
    local line = vim.fn.getcmdline()
    feedTermCodes(('<Delete>'):rep(getDeleteWordForwardCol(line, col) - col))
  } else {
    local [_, lnum, col] = vim.fn.getpos('.')
    local line = vim.fn.getline('.')
    local newCol = getDeleteWordForwardCol(line, col)
    vim.fn.setline(lnum, line:sub(1, col - 1) .. line:sub(newCol))
  }
}

module function deleteLineBack() {
  if vim.fn.mode() == 'c' {
    feedTermCodes(('<BS>'):rep(vim.fn.getcmdpos()))
  } else {
    local [_, lnum, col] = vim.fn.getpos('.')
    local line = vim.fn.getline('.')
    vim.fn.setline(lnum, line:sub(col))
    vim.fn.setcharpos('.', { 0, lnum, 1, 0 })
  }
}

module function deleteLineForward() {
  if vim.fn.mode() == 'c' {
    local col = vim.fn.getcmdpos()
    local line = vim.fn.getcmdline()
    feedTermCodes(('<Delete>'):rep(#line - col + 1))
  } else {
    local [_, lnum, col] = vim.fn.getpos('.')
    local line = vim.fn.getline('.')
    vim.fn.setline(lnum, line:sub(1, col - 1))
  }
}
